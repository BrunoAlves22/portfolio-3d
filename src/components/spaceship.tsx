/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: JazOone (https://sketchfab.com/JazOone)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/spaceship-6164a883f57f4f13938c3c5999bc0e1f
Title: SpaceShip
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import type { JSX } from "react";
import { useAnimations, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { useMotionValue, useSpring } from "motion/react";

type GLTFResult = GLTF & {
  nodes: {
    Starship_Material003_0: THREE.Mesh;
  };
  materials: {
    ["Material.003"]: THREE.MeshStandardMaterial;
  };
};

export function Spaceship(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    "/models/spaceship.glb"
  ) as unknown as GLTFResult;
  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    if (animations.length > 0) {
      actions[animations[0].name]?.play();
    }
  }, [actions, animations]);

  const yPosition = useMotionValue(5);
  const ySpring = useSpring(yPosition, {
    damping: 30,
  });

  useEffect(() => {
    ySpring.set(-1);
  }, [ySpring]);

  useFrame(() => {
    group.current!.position.y = ySpring.get();
  });

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      scale={props.scale || 1}
      position={props.position || [80, 0, 0]} // Posição mais à direita
      rotation={[1.7, 0, 0]}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Starship_Material003_0.geometry}
        material={materials["Material.003"]}
      />
    </group>
  );
}

useGLTF.preload("/models/spaceship.glb");
